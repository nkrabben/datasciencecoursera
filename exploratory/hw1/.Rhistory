setwd('/Users/m3ta2/dev/datasciencecoursera/getting_and_cleaning')
#q1
fHouseURL<-'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
fHouse<-'housing.csv'
download.file(fHouseURL, destfile=fHouse,method='curl')
fHouseD <- date()
fHouseD
df1<-read.csv(fHouse)
# total $1e6+ houses in the dataset
sum(df1$VAL==24,na.rm=T)
#q3
library(xlsx)
fNatGasURL<-'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'
fNatGas<-'natgas.xlsx'
download.file(fNatGasURL, destfile=fNatGas,method='curl')
fNatGasD <- date()
fNatGasD
dat=read.xlsx(fNatGas,sheetIndex=1,header=T,rowIndex=18:23,colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
#q4
library(XML)
fRestURL<-'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
fRest<-'restaurants.xml'
download.file(fRestURL, destfile=fRest,method='curl')
fRestD <-date()
fRestD
doc <- xmlTreeParse(fRest,useInternal=T)
fRestRoot <- xmlRoot(doc)
zips <- xpathSApply(fRestRoot,'//zipcode',xmlValue)
zips[zips=="21231"]
#q5
library(data.table)
fHouse2URL<-'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
fHouse2<-'housing2.csv'
download.file(fHouse2URL, destfile=fHouse2,method='curl')
DT <-fread(fHouse2)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(mean(DT[DT$SEX==1,]$pwgtp15))
collected_results[i] <- single_function_time[1]
}
print(mean(collected_results))
for (i in 1:trial_size){
single_function_time <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
collected_results[i] <- single_function_time[1]
}
print(mean(collected_results))
source('~/dev/datasciencecoursera/r_programming/quiz1.r')
head (df,2)
#q13
nrow(df)
#q14
tail(df,2)
#q15
df[47,1]
#q16
sum(is.na(df[,1]))
#q17
mean(df[,1], na.rm=T)
#q18
df.sub <- subset(df, Ozone > 31 & Temp > 90)
mean(df.sub[,2])
#q19
mean(df[df$Month==6,4])
#q20
max(df[df$Month==5,1], na.rm=T)
pwd
wd
?pwd
getwd()
#plot1 Global Active Power histogram
source('get_data.r')
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
source('~/dev/datasciencecoursera/exploratory/hw1/get_data.r')
#function to extract the necessary data, convert time data, and dump it all in a data frame
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
png('plot1.png', bg='transparent', height=480, width=480)
hist(df$Global_active_power, main="Global Active Power", col='red', xlab="Global Active Power (kilowatts)")
par(mar=c(6,5,5,3), cex=0.8)
dev.off()
?png
png('plot1.png', bg='transparent')
hist(df$Global_active_power, main="Global Active Power", col='red', xlab="Global Active Power (kilowatts)")
par(mar=c(6,5,5,3), cex=0.8)
dev.off()
?par
#plot2 Global Active power over time
source('get_data.r')
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
png('plot2.png', bg='transparent', height=480, width=480)
with(df,plot(datetime,Global_active_power,type='l', ylab="Global Active Power (kilowatts)", xlab=''))
box()
dev.off()
lines(df$datetime, df$Sub_metering_3, col='blue')
png('plot3.png', bg='transparent')
with(df,plot(datetime, Sub_metering_1, type='n', ylab="Energy sub metering", xlab=''))
#each line individually
lines(df$datetime, df$Sub_metering_1)
lines(df$datetime, df$Sub_metering_2, col='red')
lines(df$datetime, df$Sub_metering_3, col='blue')
legend('topright', lty=c(1,1), col=c('black','red','blue'), legend = c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
box()
dev.off()
#plot4
source('get_data.r')
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
png('plot4.png', bg='transparent', height=480, width=480)
par(mfrow=c(2,2))
with(df,{
#plot 1 from plot2
plot(datetime,Global_active_power,type='l', ylab="Global Active Power (kilowatts)", xlab='')
#plot 2 Voltage over time
plot(datetime,Voltage, type='l')
#plot 3 from plot3
plot(datetime,Sub_metering_1, type='n', ylab="Energy sub metering", xlab='')
lines(df$datetime,df$Sub_metering_1)
lines(df$datetime,df$Sub_metering_2, col='red')
lines(df$datetime,df$Sub_metering_3, col='blue')
legend('topright', bty='n', lty=c(1,1), col=c('black','red','blue'), legend = c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
#plot 4 Global Reactive Power over time
plot(datetime,Global_reactive_power, type='l')
box()
dev.off()
})
png('plot4.png', bg='transparent')
par(mfrow=c(2,2))
source('~/dev/datasciencecoursera/exploratory/hw1/plot4.r')
with(df,{
#plot 1 from plot2
plot(datetime, Global_active_power,type='l', ylab="Global Active Power (kilowatts)", xlab='')
#plot 2 Voltage over time
plot(datetime,Voltage, type='l')
#plot 3 from plot3
plot(datetime, Sub_metering_1, type='n', ylab="Energy sub metering", xlab='')
lines(df$datetime, df$Sub_metering_1)
lines(df$datetime, df$Sub_metering_2, col='red')
lines(df$datetime, df$Sub_metering_3, col='blue')
legend('topright', bty='n', lty=c(1,1), col=c('black','red','blue'),
legend = c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
#plot 4 Global Reactive Power over time
plot(datetime, Global_reactive_power, type='l')
box()
dev.off()
})
par(mar=c(6,5,5,3), cex=0.8)
#plot1 Global Active Power histogram
source('get_data.r')
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
source('~/dev/datasciencecoursera/exploratory/hw1/get_data.r')
source('~/.active-rstudio-document')
source('~/dev/datasciencecoursera/exploratory/hw1/get_data.r')
source('~/.active-rstudio-document')
source('get_data.r')
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
png('plot1.png', bg='transparent')
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
#plot1 Global Active Power histogram
source('get_data.r')
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
source('~/dev/datasciencecoursera/exploratory/hw1/get_data.r')
png('plot1.png', bg='transparent')
hist(df$Global_active_power, main="Global Active Power", col='red', xlab="Global Active Power (kilowatts)")
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
source('~/dev/datasciencecoursera/exploratory/hw1/get_data.r')
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
source('~/dev/datasciencecoursera/exploratory/hw1/get_data.r')
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
df <- create_frame(fPowerD)
source('~/.active-rstudio-document')
#function to check if file is downloaded, and download and unzip if not, returns file name
#check get_data.r
fPowerD <- check_grab()
#function to extract the necessary data, convert time data, and dump it all in a data frame
#check get_data.r
df <- create_frame(fPowerD)
